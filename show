#!/usr/bin/python

import sys, os, signal

pipe_name = None
grandparent = None

def remove_pipe():
  try: 
    os.unlink(pipe_name)
  except:
    return False
  return True

def process_file(file_name):
  if pipe_name is None:
    raise Exception()
  if grandparent is None:
     raise Exception()
  try:
    fd = open(file_name, "r")
  except:
    remove_pipe()
    print >> sys.stderr, ("show: problem opening file: " + file_name)
    raise Exception()
  if not fd:
    remove_pipe()
    raise Exception()
  try:
     os.kill(grandparent, signal.SIGUSR1)
     pipe = open(pipe_name, "wb")
  except:
     remove_pipe()
     raise Exception()
  line = fd.read()
  while len(line):
        print >> pipe, line
        line = fd.read()
  print >> pipe, line
  fd.close()
  pipe.flush()
  if not pipe.closed: pipe.close()

def process_stdin():
  if pipe_name is None:
     raise Exception()
  if grandparent is None:
     raise Exception()
  if sys.stdin.isatty():
    remove_pipe()
    print >> sys.stderr, 'show: terminal input is not supported'
    raise Exception()
  try:
     os.kill(grandparent, signal.SIGUSR1)
     pipe = open(pipe_name, "wb")
  except:
     remove_pipe()
     raise Exception()
  print >> pipe, sys.stdin.read()
  pipe.flush()
  if not pipe.closed: pipe.close()

def main():
   argv = sys.argv
   if len(argv) == 1:
      try_pipe = True
   else:
      try_pipe = False
   parentpid = os.getppid()
   if parentpid < 0:
     return
   global pipe_name 
   pipe_name = "/tmp/pipe_show_%s" % str(parentpid)
   if os.path.exists(pipe_name):
     if not remove_pipe():
       print >> sys.stderr, ("show: pipe " + pipe_name + " cannot be not removed") 
       return
   termpy_file = "/tmp/show_gppid_%s"  % (parentpid)
   global grandparent
   try:
     with open(termpy_file, "r") as f:
        grandparent = int(f.readline())
   except:
      print >> sys.stderr, ("show: lock file problem: " + termpy_file)
      return 
   if not os.path.exists(pipe_name):
      try:
        os.mkfifo(pipe_name)
      except:
        print >> sys.stderr, "show: cannot create pipe"
        return
      try:
        if not try_pipe:
          process_file(argv[1])
        else:
          process_stdin()
      except:
        print >> sys.stderr, "show: problem occured while transferring file"
        return

if __name__=='__main__':
  main()
