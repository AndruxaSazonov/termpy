#!/usr/bin/python

import sys, os, signal

def remove_pipe(pipe_name):
  try:
    os.unlink(pipe_name)
  except:
    return False
  return True

def is_iam_a_child():
  forked_bash_pids = [fname[fname.rfind('_')+1:] for fname in os.listdir('/tmp') \
                                                 if fname.startswith("show_gppid")]
  pid = os.getpid()
  while pid != "1":
    pid = os.popen("ps -p %s -oppid=" % pid).read().strip()
    if pid in forked_bash_pids: break
  if pid == "1":
    raise Exception('show: no pid files or running not with term.py')
  return pid

def process_file(file_name, pipe_name, grandparent):
  if pipe_name is None:
    raise Exception('show: no pipe name')
  if grandparent is None:
    raise Exception('show: granparent process not found')
  try:
    fd = open(file_name, "rb")
  except:
    remove_pipe(pipe_name)
    raise Exception('show: problem while opening file: ' + file_name)
  try:
    os.kill(grandparent, signal.SIGUSR1)
    pipe = open(pipe_name, "wb")
  except:
    remove_pipe(pipe_name)
    raise Exception('show: problem while opening pipe')
  line = fd.read()
  print >> pipe, line
  fd.close()
  pipe.close()

def process_stdin(pipe_name, grandparent):
  if pipe_name is None:
     raise Exception('show: no pipe name')
  if grandparent is None:
     raise Exception('show: grandparent process not found')
  if sys.stdin.isatty():
     remove_pipe(pipe_name)
     raise Exception('show: terminal input is not supported')
  try:
     os.kill(grandparent, signal.SIGUSR1)
     pipe = open(pipe_name, "wb")
  except:
     remove_pipe(pipe_name)
     raise Exception('show: cannot open named pipe')
  print >> pipe, sys.stdin.read()
  pipe.close()

def main():
   try:
     bash_grandparent = is_iam_a_child()
   except Exception as exception:
     print >> sys.stderr, exception
     return
   termpy_file = "/tmp/show_gppid_%s"  % bash_grandparent
   try:
     with open(termpy_file, "r") as f:
        termpy = int(f.readline())
   except:
      print >> sys.stderr, ("show: pid file problem: " + termpy_file)
      return
   pipe_name = "/tmp/pipe_show_%s" % bash_grandparent
   if os.path.exists(pipe_name):
     if not remove_pipe(pipe_name):
       print >> sys.stderr, ("show: pipe " + pipe_name + " cannot be removed")
       return
   if not os.path.exists(pipe_name):
      try:
        os.mkfifo(pipe_name)
      except:
        print >> sys.stderr, "show: cannot create pipe"
        return
      try:
        if len(sys.argv) > 1:
          process_file(sys.argv[1], pipe_name, termpy)
        else:
          process_stdin(pipe_name, termpy)
      except Exception as exception:
        print >> sys.stderr, exception

if __name__=='__main__':
  main()
